<div class="page-header">
  <div class="container">
    <div class="row align-items-center">
      <div class="col-md-8">
        <h1 class="display-5 fw-bold mb-2">ðŸ“š Available Books</h1>
        <p class="lead mb-0 opacity-75">Discover your next favorite read from our curated collection</p>
      </div>
      <div class="col-md-4 text-end">
        <% if (typeof user !== 'undefined' && user && user.role === 'admin') { %>
          <button class="btn btn-light btn-lg" data-bs-toggle="modal" data-bs-target="#addBookModal">
            <i class="bi bi-plus-circle me-2"></i>Add New Book
          </button>
        <% } %>
      </div>
    </div>
  </div>
</div>

<div class="container">

<!-- Search Bar -->
<div class="row mb-4">
  <div class="col-md-8 mx-auto">
    <form action="/books/search" method="GET" class="input-group">
      <input type="text" class="form-control" name="q" placeholder="Search books by title, author, genre, or description..." value="<%= typeof query !== 'undefined' ? query : '' %>">
      <button class="btn btn-outline-primary" type="submit">
        <i class="bi bi-search"></i> Search
      </button>
      <a href="/books/search" class="btn btn-outline-info">
        <i class="bi bi-sliders"></i> Advanced
      </a>
    </form>
    <div class="text-center mt-2">
      <small class="text-muted">Or use <a href="/books/search">Advanced Search</a> for filters by genre and price</small>
    </div>
  </div>
</div>

<div class="row row-cols-1 row-cols-md-3 g-4">
  <% if (books && books.length > 0) { %>
    <% books.forEach(book => { %>
      <div class="col">
        <div class="card book-card h-100">
          <div class="position-relative">
            <img src="<%= book.image %>" class="card-img-top" alt="<%= book.title %>" style="height: 300px; width: 100%; object-fit: cover;">
            <% if (book.stock < 5 && book.stock > 0) { %>
              <span class="position-absolute top-0 end-0 badge bg-warning m-2">Limited Stock</span>
            <% } else if (book.stock <= 0) { %>
              <span class="position-absolute top-0 end-0 badge bg-danger m-2">Out of Stock</span>
            <% } %>
          </div>
          <div class="card-body d-flex flex-column">
            <h5 class="card-title fw-bold text-truncate" title="<%= book.title %>"><%= book.title %></h5>
            <p class="card-text text-muted small mb-2">
              <i class="bi bi-person me-1"></i><%= book.author %>
            </p>
            <% if (book.genre) { %>
              <span class="badge bg-light text-dark mb-2 align-self-start">
                <i class="bi bi-tag me-1"></i><%= book.genre %>
              </span>
            <% } %>
            <p class="card-text flex-grow-1 small">
              <%= book.description && book.description.length > 80 ? book.description.substring(0,80) + '...' : book.description %>
            </p>
            <div class="d-flex justify-content-between align-items-center mt-auto">
              <span class="price-tag">$<%= book.price %></span>
              <% if (book.stock !== undefined) { %>
                <small class="text-muted">
                  <i class="bi bi-box me-1"></i><%= book.stock %> in stock
                </small>
              <% } %>
            </div>
          </div>
          <div class="card-footer">
            <div class="d-grid gap-2">
              <% if (typeof user !== 'undefined' && user) { %>
                <button class="btn btn-success btn-sm" onclick="addToCart('<%= book._id %>')">
                  <i class="bi bi-cart-plus"></i> Add to Cart
                </button>
              <% } else { %>
                <a href="/auth/login" class="btn btn-outline-success btn-sm">
                  <i class="bi bi-cart-plus"></i> Login to Buy
                </a>
              <% } %>
              <div class="btn-group" role="group">
                <button class="btn btn-outline-primary btn-sm">
                  <i class="bi bi-eye"></i> Details
                </button>
                <% if (typeof user !== 'undefined' && user && user.role === 'admin') { %>
                  <button class="btn btn-outline-warning btn-sm" onclick="editBook('<%= book._id %>')">
                    <i class="bi bi-pencil"></i>
                  </button>
                  <button class="btn btn-outline-danger btn-sm" onclick="deleteBook('<%= book._id %>')">
                    <i class="bi bi-trash"></i>
                  </button>
                <% } %>
              </div>
            </div>
          </div>
        </div>
      </div>
    <% }) %>
  <% } else { %>
    <div class="col-12">
      <div class="alert alert-info text-center">
        <h4>No books available yet</h4>
        <p>Check back later for new arrivals!</p>
        <% if (typeof user !== 'undefined' && user && user.role === 'admin') { %>
          <p>As an admin, you can <button class="btn btn-sm btn-success" data-bs-toggle="modal" data-bs-target="#addBookModal">add books</button> to get started.</p>
        <% } %>
      </div>
    </div>
  <% } %>
</div>

<% if (typeof user !== 'undefined' && user && user.role === 'admin') { %>
<!-- Add Book Modal -->
<div class="modal fade" id="addBookModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Add New Book</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <form action="/books/add" method="POST" enctype="multipart/form-data">
        <div class="modal-body">
          <div class="mb-3">
            <label for="title" class="form-label">Title</label>
            <input type="text" class="form-control" name="title" required>
          </div>
          <div class="mb-3">
            <label for="author" class="form-label">Author</label>
            <input type="text" class="form-control" name="author" required>
          </div>
          <div class="mb-3">
            <label for="genre" class="form-label">Genre</label>
            <input type="text" class="form-control" name="genre" required>
          </div>
          <div class="mb-3">
            <label for="description" class="form-label">Description</label>
            <textarea class="form-control" name="description" rows="3" required></textarea>
          </div>
          <div class="mb-3">
            <label for="image" class="form-label">Book Cover Image</label>
            <input type="file" class="form-control" name="image" accept="image/*">
            <div class="form-text">Upload a book cover image (JPG, PNG, GIF, WebP - Max 5MB)</div>
          </div>
          <div class="mb-3">
            <label for="price" class="form-label">Price ($)</label>
            <input type="number" step="0.01" class="form-control" name="price" required>
          </div>
          <div class="mb-3">
            <label for="stock" class="form-label">Stock Quantity</label>
            <input type="number" class="form-control" name="stock" value="0" min="0">
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="submit" class="btn btn-success">Add Book</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Edit Book Modal -->
<div class="modal fade" id="editBookModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Edit Book</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <form id="editBookForm" enctype="multipart/form-data">
        <div class="modal-body">
          <input type="hidden" id="editBookId" name="bookId">
          
          <div class="mb-3">
            <label for="editTitle" class="form-label">Title</label>
            <input type="text" class="form-control" id="editTitle" name="title" required>
          </div>
          <div class="mb-3">
            <label for="editAuthor" class="form-label">Author</label>
            <input type="text" class="form-control" id="editAuthor" name="author" required>
          </div>
          <div class="mb-3">
            <label for="editGenre" class="form-label">Genre</label>
            <input type="text" class="form-control" id="editGenre" name="genre" required>
          </div>
          <div class="mb-3">
            <label for="editDescription" class="form-label">Description</label>
            <textarea class="form-control" id="editDescription" name="description" rows="3" required></textarea>
          </div>
          <div class="mb-3">
            <label class="form-label">Current Cover Image</label>
            <div id="currentImagePreview" class="mb-2">
              <img id="currentImage" src="" alt="Current book cover" style="width: 150px; height: 200px; object-fit: cover;" class="img-thumbnail rounded">
            </div>
            <label for="editImage" class="form-label">Upload New Cover Image</label>
            <input type="file" class="form-control" id="editImage" name="image" accept="image/*">
            <div class="form-text">Leave empty to keep current image. Upload new image to replace.</div>
          </div>
          <div class="mb-3">
            <label for="editPrice" class="form-label">Price ($)</label>
            <input type="number" step="0.01" class="form-control" id="editPrice" name="price" required>
          </div>
          <div class="mb-3">
            <label for="editStock" class="form-label">Stock Quantity</label>
            <input type="number" class="form-control" id="editStock" name="stock" min="0">
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="submit" class="btn btn-warning">Update Book</button>
        </div>
      </form>
    </div>
  </div>
</div>
<% } %>

<!-- Bootstrap JS for modal functionality -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<script>
// Function to add to cart
async function addToCart(bookId, quantity = 1) {
  try {
    const response = await fetch('/cart/add', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ bookId, quantity })
    });

    const result = await response.json();

    if (result.success) {
      // Show success message
      showNotification('Book added to cart!', 'success');
      // Update cart count in navbar if it exists
      updateCartCount();
    } else {
      showNotification('Error: ' + (result.error || 'Failed to add to cart'), 'danger');
    }
  } catch (error) {
    console.error('Error adding to cart:', error);
    showNotification('Error: Failed to add to cart', 'danger');
  }
}

// Function to show notifications
function showNotification(message, type = 'info') {
  // Create notification element
  const notification = document.createElement('div');
  notification.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
  notification.style.cssText = 'top: 20px; right: 20px; z-index: 1050; min-width: 300px;';
  notification.innerHTML = `
    ${message}
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  `;
  
  document.body.appendChild(notification);
  
  // Auto remove after 3 seconds
  setTimeout(() => {
    if (notification.parentNode) {
      notification.remove();
    }
  }, 3000);
}

// Function to update cart count
async function updateCartCount() {
  try {
    const response = await fetch('/cart/count');
    const data = await response.json();
    
    const cartBadge = document.querySelector('.cart-count');
    if (cartBadge) {
      cartBadge.textContent = data.count;
      cartBadge.style.display = data.count > 0 ? 'inline' : 'none';
    }
  } catch (error) {
    console.log('Error updating cart count:', error);
  }
}

// Function to edit a book
async function editBook(bookId) {
  try {
    // Fetch book data
    const response = await fetch(`/books/edit/${bookId}`);
    const book = await response.json();

    if (response.ok) {
      // Populate the edit form
      document.getElementById('editBookId').value = book._id;
      document.getElementById('editTitle').value = book.title;
      document.getElementById('editAuthor').value = book.author;
      document.getElementById('editGenre').value = book.genre || '';
      document.getElementById('editDescription').value = book.description || '';
      document.getElementById('editPrice').value = book.price;
      document.getElementById('editStock').value = book.stock || 0;
      
      // Show current image
      const currentImage = document.getElementById('currentImage');
      currentImage.src = book.image;
      
      // Show the modal
      const editModal = new bootstrap.Modal(document.getElementById('editBookModal'));
      editModal.show();
    } else {
      alert('Error: ' + (book.error || 'Failed to fetch book data'));
    }
  } catch (error) {
    console.error('Error fetching book:', error);
    alert('Error: Failed to fetch book data');
  }
}

// Function to delete a book
async function deleteBook(bookId) {
  if (!confirm('Are you sure you want to delete this book? This action cannot be undone.')) {
    return;
  }

  try {
    const response = await fetch(`/books/delete/${bookId}`, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json'
      }
    });

    const result = await response.json();

    if (result.success) {
      // Show success message and reload page
      alert('Book deleted successfully!');
      window.location.reload();
    } else {
      alert('Error: ' + (result.error || 'Failed to delete book'));
    }
  } catch (error) {
    console.error('Error deleting book:', error);
    alert('Error: Failed to delete book');
  }
}

// Handle edit form submission
document.addEventListener('DOMContentLoaded', function() {
  // Handle edit form submission
  const editForm = document.getElementById('editBookForm');
  if (editForm) {
    editForm.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const bookId = document.getElementById('editBookId').value;
      const formData = new FormData(editForm);
      
      try {
        const response = await fetch(`/books/edit/${bookId}`, {
          method: 'PUT',
          body: formData
        });

        const result = await response.json();

        if (result.success) {
          alert('Book updated successfully!');
          // Close modal
          const editModal = bootstrap.Modal.getInstance(document.getElementById('editBookModal'));
          editModal.hide();
          // Reload page
          window.location.reload();
        } else {
          alert('Error: ' + (result.error || 'Failed to update book'));
        }
      } catch (error) {
        console.error('Error updating book:', error);
        alert('Error: Failed to update book');
      }
    });
  }

  // Preview image when selected (for both add and edit forms)
  const imageInputs = document.querySelectorAll('input[type="file"][accept*="image"]');
  imageInputs.forEach(input => {
    input.addEventListener('change', function(e) {
      const file = e.target.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = function(e) {
          console.log('Image selected:', file.name);
          // You can add image preview functionality here if needed
        };
        reader.readAsDataURL(file);
      }
    });
  });
});
</script>
