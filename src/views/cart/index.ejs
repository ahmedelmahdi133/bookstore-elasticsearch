<div class="page-header">
  <div class="container">
    <div class="text-center">
      <h1 class="display-5 fw-bold mb-2">ðŸ›’ Shopping Cart</h1>
      <p class="lead mb-0 opacity-75">Review your selected books before checkout</p>
    </div>
  </div>
</div>

<div class="container py-4">
  <div class="row">
    <div class="col-lg-8">
      <div class="card shadow-lg">
        <div class="card-header" style="background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); color: #424242; border: none;">
          <h4 class="mb-0"><i class="bi bi-cart3 me-2"></i>Your Items</h4>
        </div>
        <div class="card-body">
          <% if (cart.items && cart.items.length > 0) { %>
            <% cart.items.forEach(item => { %>
              <div class="row cart-item mb-3 pb-3 border-bottom" data-book-id="<%= item.book._id %>">
                <div class="col-md-2">
                  <img src="<%= item.book.image %>" alt="<%= item.book.title %>" 
                       class="img-fluid rounded" style="width: 80px; height: 100px; object-fit: cover;">
                </div>
                <div class="col-md-4">
                  <h6 class="mb-1"><%= item.book.title %></h6>
                  <p class="text-muted small mb-1">by <%= item.book.author %></p>
                  <% if (item.book.genre) { %>
                    <span class="badge bg-secondary small"><%= item.book.genre %></span>
                  <% } %>
                </div>
                <div class="col-md-2">
                  <div class="input-group input-group-sm">
                    <button class="btn btn-outline-secondary" type="button" onclick="updateQuantity('<%= item.book._id %>', <%= item.quantity - 1 %>)">-</button>
                    <input type="number" class="form-control text-center quantity-input" 
                           value="<%= item.quantity %>" min="1" max="<%= item.book.stock %>"
                           onchange="updateQuantity('<%= item.book._id %>', this.value)">
                    <button class="btn btn-outline-secondary" type="button" onclick="updateQuantity('<%= item.book._id %>', <%= item.quantity + 1 %>)">+</button>
                  </div>
                  <small class="text-muted">Stock: <%= item.book.stock %></small>
                </div>
                <div class="col-md-2 text-center">
                  <p class="mb-1 fw-bold">$<%= (item.price * item.quantity).toFixed(2) %></p>
                  <small class="text-muted">$<%= item.price %> each</small>
                </div>
                <div class="col-md-2 text-end">
                  <button class="btn btn-outline-danger btn-sm" onclick="removeFromCart('<%= item.book._id %>')">
                    <i class="bi bi-trash"></i> Remove
                  </button>
                </div>
              </div>
            <% }) %>
          <% } else { %>
            <div class="text-center py-5">
              <i class="bi bi-cart-x display-1 text-muted"></i>
              <h5 class="mt-3">Your cart is empty</h5>
              <p class="text-muted">Add some books to get started!</p>
              <a href="/books" class="btn btn-primary">Browse Books</a>
            </div>
          <% } %>
        </div>
      </div>
    </div>
    
    <% if (cart.items && cart.items.length > 0) { %>
      <div class="col-lg-4">
        <div class="card shadow-lg">
          <div class="card-header" style="background: linear-gradient(135deg, #e8f5e8 0%, #f1f8e9 100%); color: #388e3c; border: none;">
            <h5 class="mb-0"><i class="bi bi-receipt me-2"></i>Order Summary</h5>
          </div>
          <div class="card-body">
            <div class="d-flex justify-content-between mb-2">
              <span>Items (<span id="cart-items-count"><%= cart.totalItems %></span>):</span>
              <span>$<span id="cart-subtotal"><%= cart.totalAmount.toFixed(2) %></span></span>
            </div>
            <div class="d-flex justify-content-between mb-2">
              <span>Shipping:</span>
              <span class="text-success">FREE</span>
            </div>
            <hr>
            <div class="d-flex justify-content-between mb-3">
              <strong>Total:</strong>
              <strong>$<span id="cart-total"><%= cart.totalAmount.toFixed(2) %></span></strong>
            </div>
            
            <div class="d-grid gap-2">
              <a href="/payment/checkout" class="btn btn-success btn-lg">
                <i class="bi bi-credit-card"></i> Proceed to Checkout
              </a>
              <button class="btn btn-outline-secondary" onclick="clearCart()">
                <i class="bi bi-cart-x"></i> Clear Cart
              </button>
              <small class="text-muted text-center mt-2">
                <i class="bi bi-shield-check"></i> Secure payment powered by Stripe
              </small>
            </div>
          </div>
        </div>
        
        <!-- Continue Shopping -->
        <div class="mt-3">
          <a href="/books" class="btn btn-outline-primary w-100">
            <i class="bi bi-arrow-left"></i> Continue Shopping
          </a>
        </div>
      </div>
    <% } %>
  </div>
</div>

<!-- Bootstrap Icons -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">

<script>
// Update quantity
async function updateQuantity(bookId, quantity) {
  quantity = parseInt(quantity);
  
  if (quantity < 1) {
    return removeFromCart(bookId);
  }

  try {
    const response = await fetch('/cart/update', {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ bookId, quantity })
    });

    const result = await response.json();

    if (result.success) {
      location.reload(); // Refresh to show updated totals
    } else {
      alert('Error: ' + (result.error || 'Failed to update quantity'));
    }
  } catch (error) {
    console.error('Error updating quantity:', error);
    alert('Error: Failed to update quantity');
  }
}

// Remove from cart
async function removeFromCart(bookId) {
  if (!confirm('Remove this item from cart?')) {
    return;
  }

  try {
    const response = await fetch(`/cart/remove/${bookId}`, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json'
      }
    });

    const result = await response.json();

    if (result.success) {
      location.reload(); // Refresh to show updated cart
    } else {
      alert('Error: ' + (result.error || 'Failed to remove item'));
    }
  } catch (error) {
    console.error('Error removing item:', error);
    alert('Error: Failed to remove item');
  }
}

// Clear cart
async function clearCart() {
  if (!confirm('Are you sure you want to clear your entire cart?')) {
    return;
  }

  try {
    const response = await fetch('/cart/clear', {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json'
      }
    });

    const result = await response.json();

    if (result.success) {
      location.reload(); // Refresh to show empty cart
    } else {
      alert('Error: ' + (result.error || 'Failed to clear cart'));
    }
  } catch (error) {
    console.error('Error clearing cart:', error);
    alert('Error: Failed to clear cart');
  }
}
</script>
